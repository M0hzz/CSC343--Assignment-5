#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <queue>

using namespace std;

struct Process {
    int id;
    int burstTime;
    int priority;
    int arrivalTime;
    int waitingTime;
    int turnaroundTime;
    int remainingTime;
    
    Process(int i, int bt, int p, int at = 0) : 
        id(i), burstTime(bt), priority(p), arrivalTime(at), 
        waitingTime(0), turnaroundTime(0), remainingTime(bt) {}
};

// Function to calculate waiting time and turnaround time for FCFS
void calculateFCFS(vector<Process>& processes) {
    int currentTime = 0;
    
    for (auto& p : processes) {
        
        if (currentTime < p.arrivalTime) {
            currentTime = p.arrivalTime;
        }
        
        p.waitingTime = currentTime - p.arrivalTime;
        currentTime += p.burstTime;
        p.turnaroundTime = currentTime - p.arrivalTime;
    }
}

// Function to calculate waiting time and turnaround time for SJF (non-preemptive)
void calculateSJF(vector<Process>& processes) {
    vector<Process> result = processes;
    vector<Process> ready;
    int currentTime = 0;
    int completed = 0;
    
    // Sort processes by burst time (for SJF)
    sort(result.begin(), result.end(), [](const Process& a, const Process& b) {
        return a.burstTime < b.burstTime;
    });
    
    for (auto& p : result) {
        p.waitingTime = currentTime;
        currentTime += p.burstTime;
        p.turnaroundTime = currentTime;
    }
    
    for (size_t i = 0; i < processes.size(); i++) {
        for (size_t j = 0; j < result.size(); j++) {
            if (processes[i].id == result[j].id) {
                processes[i].waitingTime = result[j].waitingTime;
                processes[i].turnaroundTime = result[j].turnaroundTime;
                break;
            }
        }
    }
}

// Function to calculate waiting time and turnaround time for Priority Scheduling (non-preemptive)
void calculatePriority(vector<Process>& processes) {
    vector<Process> result = processes;
    
    // Sort processes by priority (higher priority number means higher priority)
    sort(result.begin(), result.end(), [](const Process& a, const Process& b) {
        return a.priority > b.priority;
    });
    
    int currentTime = 0;
    
    for (auto& p : result) {
        p.waitingTime = currentTime;
        currentTime += p.burstTime;
        p.turnaroundTime = currentTime;
    }
    
    // Map the sorted results back to the original process IDs
    for (size_t i = 0; i < processes.size(); i++) {
        for (size_t j = 0; j < result.size(); j++) {
            if (processes[i].id == result[j].id) {
                processes[i].waitingTime = result[j].waitingTime;
                processes[i].turnaroundTime = result[j].turnaroundTime;
                break;
            }
        }
    }
}

// Function to calculate waiting time and turnaround time for Round Robin
void calculateRR(vector<Process>& processes, int quantum) {
    vector<Process> result = processes;
    int n = result.size();
    vector<int> remainingTime(n);
    
    // Initialize remaining time for all processes
    for (int i = 0; i < n; i++) {
        remainingTime[i] = result[i].burstTime;
    }
    
    int currentTime = 0;
    bool done = false;
    
    // Create completion time array
    vector<int> completionTime(n, 0);
    
    // Process until all processes are complete
    while (!done) {
        done = true;
        
        for (int i = 0; i < n; i++) {
            if (remainingTime[i] > 0) {
                done = false;
                
                if (remainingTime[i] > quantum) {
                    currentTime += quantum;
                    remainingTime[i] -= quantum;
                } else {
                    currentTime += remainingTime[i];
                    completionTime[i] = currentTime;
                    remainingTime[i] = 0;
                }
            }
        }
    }
    
    // Calculate waiting time and turnaround time
    for (int i = 0; i < n; i++) {
        result[i].turnaroundTime = completionTime[i] - result[i].arrivalTime;
        result[i].waitingTime = result[i].turnaroundTime - result[i].burstTime;
    }
    
    // Map the results back to the original process IDs
    for (size_t i = 0; i < processes.size(); i++) {
        for (size_t j = 0; j < result.size(); j++) {
            if (processes[i].id == result[j].id) {
                processes[i].waitingTime = result[j].waitingTime;
                processes[i].turnaroundTime = result[j].turnaroundTime;
                break;
            }
        }
    }
}

// Function to display process details
void displayResults(const vector<Process>& processes, const string& algorithm) {
    cout << "----------------- " << algorithm << " -----------------" << endl;
    cout << "Process ID | Waiting Time | Turnaround Time" << endl;
    
    float avgWaitingTime = 0, avgTurnaroundTime = 0;
    
    for (const auto& p : processes) {
        cout << setw(10) << p.id << " | " 
             << setw(12) << p.waitingTime << " | " 
             << setw(15) << p.turnaroundTime << endl;
        
        avgWaitingTime += p.waitingTime;
        avgTurnaroundTime += p.turnaroundTime;
    }
    
    avgWaitingTime /= processes.size();
    avgTurnaroundTime /= processes.size();
    
    cout << "Average Waiting Time: " << avgWaitingTime << endl;
    cout << "Average Turnaround Time: " << avgTurnaroundTime << endl;
    cout << endl;
}

int main() {
    // Create processes from Q2
    vector<Process> processes = {
        Process(1, 2, 2),  // P1 (burst=2, priority=2)
        Process(2, 1, 1),  // P2 (burst=1, priority=1)
        Process(3, 8, 4),  // P3 (burst=8, priority=4)
        Process(4, 4, 2),  // P4 (burst=4, priority=2)
        Process(5, 5, 3)   // P5 (burst=5, priority=3)
    };
    
    // Calculate and display FCFS results
    vector<Process> fcfsProcesses = processes;
    calculateFCFS(fcfsProcesses);
    displayResults(fcfsProcesses, "FCFS");
    
    // Calculate and display SJF results
    vector<Process> sjfProcesses = processes;
    calculateSJF(sjfProcesses);
    displayResults(sjfProcesses, "SJF");
    
    // Calculate and display Priority results
    vector<Process> priorityProcesses = processes;
    calculatePriority(priorityProcesses);
    displayResults(priorityProcesses, "Priority (Non-preemptive)");
    
    // Calculate and display Round Robin results
    vector<Process> rrProcesses = processes;
    calculateRR(rrProcesses, 2);  // quantum = 2
    displayResults(rrProcesses, "Round Robin (q=2)");
    
    return 0;
}
